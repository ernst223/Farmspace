// <auto-generated />
using System;
using FarmboekAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FarmboekAPI.Migrations
{
    [DbContext(typeof(FarmboekContext))]
    [Migration("20200127124520_addingRemediesLink")]
    partial class addingRemediesLink
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FarmboekAPI.Models.AccessType", b =>
                {
                    b.Property<int>("AccessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessTypeId");

                    b.ToTable("AccessType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ActiveIngredient", b =>
                {
                    b.Property<int>("ActiveIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiveIngredientId");

                    b.ToTable("ActiveIngredient");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Address", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostalCountryIdCountryId")
                        .HasColumnName("PostalCountryId_CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("PostalProvinceIdProvinceId")
                        .HasColumnName("PostalProvinceId_ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("PostalTownIdTownId")
                        .HasColumnName("PostalTownId_TownId")
                        .HasColumnType("int");

                    b.Property<string>("ResidentialAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("AddressTypeId");

                    b.HasIndex("PostalCountryIdCountryId")
                        .HasName("IX_PostalCountryId_CountryId");

                    b.HasIndex("PostalProvinceIdProvinceId")
                        .HasName("IX_PostalProvinceId_ProvinceId");

                    b.HasIndex("PostalTownIdTownId")
                        .HasName("IX_PostalTownId_TownId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AdvertisementLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ClickCounter")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Home")
                        .HasColumnType("bit");

                    b.Property<int>("LoadCounter")
                        .HasColumnType("int");

                    b.Property<bool>("PhonePage")
                        .HasColumnType("bit");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("SupplierBrandHome")
                        .HasColumnType("bit");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<bool>("TopLevelItem")
                        .HasColumnType("bit");

                    b.Property<int>("TotalLoadCounter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("FarmboekAPI.Models.AdvertisementImage", b =>
                {
                    b.Property<int>("AdvertisementImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementImageId");

                    b.HasIndex("AdvertisementId")
                        .HasName("IX_AdvertisementId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.ToTable("AdvertisementImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.AdvertisementRoute", b =>
                {
                    b.Property<int>("AdvertisementRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int?>("LoadCounter")
                        .HasColumnName("loadCounter")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementRouteId");

                    b.HasIndex("AdvertisementId")
                        .HasName("IX_AdvertisementId");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.ToTable("AdvertisementRoute");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Agency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgencyId");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Attribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AttributeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeId");

                    b.ToTable("Attribute");
                });

            modelBuilder.Entity("FarmboekAPI.Models.AuctionCategory", b =>
                {
                    b.Property<int>("AuctionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuctionCategoryId");

                    b.ToTable("AuctionCategory");
                });

            modelBuilder.Entity("FarmboekAPI.Models.AuctionItems", b =>
                {
                    b.Property<int>("AuctionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuctionItemId");

                    b.HasIndex("AuctionId")
                        .HasName("IX_AuctionId");

                    b.ToTable("AuctionItems");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Auctions", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuctionCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AuctionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AuctionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuctionId");

                    b.HasIndex("AuctionCategoryId")
                        .HasName("IX_AuctionCategoryId");

                    b.HasIndex("ProvinceId")
                        .HasName("IX_ProvinceId");

                    b.HasIndex("TownId")
                        .HasName("IX_TownId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BankAccountType", b =>
                {
                    b.Property<int>("BankAccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankAccountTypeId");

                    b.ToTable("BankAccountType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnName("Address_Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnName("Address_Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.HasIndex("AgencyId")
                        .HasName("IX_AgencyId");

                    b.HasIndex("ProvinceId")
                        .HasName("IX_ProvinceId");

                    b.HasIndex("TownId")
                        .HasName("IX_TownId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.HasIndex("ContactId")
                        .HasName("IX_ContactId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BrandImage", b =>
                {
                    b.Property<int>("BrandImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.HasKey("BrandImageId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.ToTable("BrandImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessEntityBaseId")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("BusinessEntityBaseId")
                        .HasName("IX_BusinessEntityBaseId");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.ToTable("BusinessEntity");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BusinessEntityBase", b =>
                {
                    b.Property<int>("BusinessEntityBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessEntityBaseId");

                    b.ToTable("BusinessEntityBase");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BusinessEntityImage", b =>
                {
                    b.Property<int>("BusinessEntityImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessEntityBaseId")
                        .HasColumnType("int");

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.HasKey("BusinessEntityImageId");

                    b.HasIndex("BusinessEntityBaseId")
                        .HasName("IX_BusinessEntityBaseId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.ToTable("BusinessEntityImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BusinessEntityType", b =>
                {
                    b.Property<int>("BusinessEntityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessEntityTypeId");

                    b.ToTable("BusinessEntityType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BusinessEntityTypeAssignment", b =>
                {
                    b.Property<int>("BusinessEntityTypeAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessEntityTypeId")
                        .HasColumnType("int");

                    b.HasKey("BusinessEntityTypeAssignmentId");

                    b.HasIndex("BusinessEntityId")
                        .HasName("IX_BusinessEntityId");

                    b.HasIndex("BusinessEntityTypeId")
                        .HasName("IX_BusinessEntityTypeId");

                    b.ToTable("BusinessEntityTypeAssignment");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BusinessType", b =>
                {
                    b.Property<int>("BusinessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessTypeId");

                    b.ToTable("BusinessType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BussinessProfile", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountHolder")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("AccountTypeId")
                        .HasColumnName("AccountTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("BankId")
                        .HasColumnName("BankID")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("BusinessTypeId")
                        .HasColumnName("BusinessTypeID")
                        .HasColumnType("int");

                    b.Property<string>("CellNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostalAddress1")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostalAddress2")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PrimaryActivityId")
                        .HasColumnName("PrimaryActivityID")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnName("ProvinceID")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TownId")
                        .HasColumnName("TownID")
                        .HasColumnType("int");

                    b.Property<string>("VatNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkFax")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("BusinessId");

                    b.ToTable("BussinessProfile");
                });

            modelBuilder.Entity("FarmboekAPI.Models.CensoredWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CensoredWord");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ChatGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId")
                        .HasName("IX_CreatedUserId");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.ToTable("ChatGroup");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ChatGroupUserBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatGroupId")
                        .HasName("IX_ChatGroupId");

                    b.HasIndex("CreatedUserId")
                        .HasName("IX_CreatedUserId");

                    b.HasIndex("UserProfileId")
                        .HasName("IX_UserProfileId");

                    b.ToTable("ChatGroupUserBan");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ListingFileImageId")
                        .HasColumnType("int");

                    b.Property<int?>("ListingFileVideoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListingFileImageId")
                        .HasName("IX_ListingFileImageId");

                    b.HasIndex("ListingFileVideoId")
                        .HasName("IX_ListingFileVideoId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ClassifiedAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassifiedAdCategoryId")
                        .HasColumnName("ClassifiedAdCategory_Id")
                        .HasColumnType("int");

                    b.Property<int>("ClassifiedAdRegionId")
                        .HasColumnName("ClassifiedAdRegion_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserUserId")
                        .HasColumnName("User_UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassifiedAdCategoryId")
                        .HasName("IX_ClassifiedAdCategory_Id");

                    b.HasIndex("ClassifiedAdRegionId")
                        .HasName("IX_ClassifiedAdRegion_Id");

                    b.HasIndex("UserUserId")
                        .HasName("IX_User_UserId");

                    b.ToTable("ClassifiedAd");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ClassifiedAdRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClassifiedAdRegion");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ClassifiedsCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClassifiedsCategories");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Combine", b =>
                {
                    b.Property<int>("CombineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CombineBaseId")
                        .HasColumnType("int");

                    b.Property<int>("MenuTypeId")
                        .HasColumnName("MenuTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("CombineId");

                    b.HasIndex("CombineBaseId")
                        .HasName("IX_CombineBaseId");

                    b.HasIndex("MenuTypeId")
                        .HasName("IX_MenuTypeID");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.ToTable("Combine");
                });

            modelBuilder.Entity("FarmboekAPI.Models.CombineBase", b =>
                {
                    b.Property<int>("CombineBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aspiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoFloat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoHeaderHeightControl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("CleaningFanSpeedrpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DischargeBeater")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Displacementcm3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnginePowerkW")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryTypeId")
                        .HasColumnName("EntryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("FueltankCapacitylitres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrainTankCapacitylitres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroundSpeed1stkmPerh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroundSpeed2ndkmPerh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroundSpeed3rdkmPerh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroundSpeed4thkmPerh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeightCabm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LateralFloat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxPowerEngineSpeedrpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoOfCylinders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallLenghtm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreCleaningSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReelAndPickupDrive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteSieveSettings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelfLevelingShoe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeperationConcavesGratesPerRotor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeperationConcavesWrapAngel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoeSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SieveAream2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardWidthm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreshingConcavesAdjustment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreshingConcavesWrapAngle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreshingConcavesWrapAngleExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreshingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalSeperationAream2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TurningRadiusm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TyreSizeFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TyreSizeRear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnloadingSpeedlitersPersec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnloadingTubeLengthExtm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnloadingTubeLengthm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weightkg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wheelbasem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CombineBaseId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandID");

                    b.HasIndex("EntryTypeId")
                        .HasName("IX_EntryTypeID");

                    b.ToTable("CombineBase");
                });

            modelBuilder.Entity("FarmboekAPI.Models.CombineImage", b =>
                {
                    b.Property<int>("CombineImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CombineBaseId")
                        .HasColumnType("int");

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.HasKey("CombineImageId");

                    b.HasIndex("CombineBaseId")
                        .HasName("IX_CombineBaseId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.ToTable("CombineImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FarmboekAPI.Models.CompanyType", b =>
                {
                    b.Property<int>("CompanyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyTypeId");

                    b.ToTable("CompanyType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("FarmboekAPI.Models.CropTradeAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CropType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Packaging")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TradeAdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeAdId")
                        .HasName("IX_TradeAdId");

                    b.ToTable("CropTradeAd");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Entity", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegistrationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyTypeIdCompanyTypeId")
                        .HasColumnName("CompanyTypeId_CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityAddressAddressTypeId")
                        .HasColumnName("EntityAddress_AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Sarsnumber")
                        .HasColumnName("SARSnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserTypeIdUserTypeId")
                        .HasColumnName("UserTypeId_UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Vatnumber")
                        .HasColumnName("VATnumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.HasIndex("CompanyTypeIdCompanyTypeId")
                        .HasName("IX_CompanyTypeId_CompanyTypeId");

                    b.HasIndex("EntityAddressAddressTypeId")
                        .HasName("IX_EntityAddress_AddressTypeId");

                    b.HasIndex("UserTypeIdUserTypeId")
                        .HasName("IX_UserTypeId_UserTypeId");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntityAddress", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostalCountryIdCountryId")
                        .HasColumnName("PostalCountryId_CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("PostalProvinceIdProvinceId")
                        .HasColumnName("PostalProvinceId_ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("PostalTownIdTownId")
                        .HasColumnName("PostalTownId_TownId")
                        .HasColumnType("int");

                    b.Property<string>("ResidentialAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressTypeId");

                    b.HasIndex("PostalCountryIdCountryId")
                        .HasName("IX_PostalCountryId_CountryId");

                    b.HasIndex("PostalProvinceIdProvinceId")
                        .HasName("IX_PostalProvinceId_ProvinceId");

                    b.HasIndex("PostalTownIdTownId")
                        .HasName("IX_PostalTownId_TownId");

                    b.ToTable("EntityAddress");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Entry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<int?>("EntryTypeTemplateId")
                        .HasColumnName("EntryTypeTemplateID")
                        .HasColumnType("int");

                    b.Property<bool>("IsBrowseBy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfo")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntryId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandID");

                    b.HasIndex("EntryTypeTemplateId")
                        .HasName("IX_EntryTypeTemplateID");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryAttribute", b =>
                {
                    b.Property<int>("EntryAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryAttributeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeId")
                        .HasColumnName("AttributeID")
                        .HasColumnType("int");

                    b.Property<int>("EntryId")
                        .HasColumnName("EntryID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntryAttributeId");

                    b.HasIndex("AttributeId")
                        .HasName("IX_AttributeID");

                    b.HasIndex("EntryId")
                        .HasName("IX_EntryID");

                    b.ToTable("EntryAttribute");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryHeader", b =>
                {
                    b.Property<int>("EntryHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryHeaderID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntryId")
                        .HasColumnName("EntryID")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnName("RouteID")
                        .HasColumnType("int");

                    b.HasKey("EntryHeaderId");

                    b.HasIndex("EntryId")
                        .HasName("IX_EntryID");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteID");

                    b.ToTable("EntryHeader");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryImage", b =>
                {
                    b.Property<int>("EntryImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryImageID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntryId")
                        .HasColumnName("EntryID")
                        .HasColumnType("int");

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.HasKey("EntryImageId");

                    b.HasIndex("EntryId")
                        .HasName("IX_EntryID");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.ToTable("EntryImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryPdf", b =>
                {
                    b.Property<int>("EntryPdfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryPDFID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntryId")
                        .HasColumnName("EntryID")
                        .HasColumnType("int");

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.HasKey("EntryPdfid");

                    b.HasIndex("EntryId")
                        .HasName("IX_EntryID");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.ToTable("EntryPDF");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryType", b =>
                {
                    b.Property<int>("EntryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntryTypeId");

                    b.ToTable("EntryType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryTypeTemplate", b =>
                {
                    b.Property<int>("EntryTypeTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryTypeTemplateID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntryTypeTemplateId");

                    b.ToTable("EntryTypeTemplate");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryTypeTemplateAttribute", b =>
                {
                    b.Property<int>("EntryTypeTemplateAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryTypeTemplateAttributeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeId")
                        .HasColumnName("AttributeID")
                        .HasColumnType("int");

                    b.Property<int>("EntryTypeTemplateId")
                        .HasColumnName("EntryTypeTemplateID")
                        .HasColumnType("int");

                    b.HasKey("EntryTypeTemplateAttributeId");

                    b.HasIndex("AttributeId")
                        .HasName("IX_AttributeID");

                    b.HasIndex("EntryTypeTemplateId")
                        .HasName("IX_EntryTypeTemplateID");

                    b.ToTable("EntryTypeTemplateAttribute");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EquipmentBaseId")
                        .HasColumnType("int");

                    b.Property<int>("MenuTypeId")
                        .HasColumnName("MenuTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.HasIndex("EquipmentBaseId")
                        .HasName("IX_EquipmentBaseId");

                    b.HasIndex("MenuTypeId")
                        .HasName("IX_MenuTypeID");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EquipmentBase", b =>
                {
                    b.Property<int>("EquipmentBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<int>("EntryTypeId")
                        .HasColumnName("EntryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecificationId")
                        .HasColumnName("SpecificationID")
                        .HasColumnType("int");

                    b.Property<int?>("SpecificationListingFileId")
                        .HasColumnName("Specification_ListingFileId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentBaseId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandID");

                    b.HasIndex("EntryTypeId")
                        .HasName("IX_EntryTypeID");

                    b.HasIndex("SpecificationListingFileId")
                        .HasName("IX_Specification_ListingFileId");

                    b.ToTable("EquipmentBase");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EquipmentFarm", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EquipmentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmId")
                        .HasColumnName("FarmID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentId");

                    b.ToTable("EquipmentFarm");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EquipmentImage", b =>
                {
                    b.Property<int>("EquipmentImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EquipmentBaseId")
                        .HasColumnType("int");

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentImageId");

                    b.HasIndex("EquipmentBaseId")
                        .HasName("IX_EquipmentBaseId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.ToTable("EquipmentImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EquipmentSpecification", b =>
                {
                    b.Property<int>("EquipmentSpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EquipmentBaseEquipmentBaseId")
                        .HasColumnName("EquipmentBase_EquipmentBaseId")
                        .HasColumnType("int");

                    b.Property<int>("SpecificationSpecificationId")
                        .HasColumnName("Specification_SpecificationId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentSpecificationId");

                    b.HasIndex("EquipmentBaseEquipmentBaseId")
                        .HasName("IX_EquipmentBase_EquipmentBaseId");

                    b.HasIndex("SpecificationSpecificationId")
                        .HasName("IX_Specification_SpecificationId");

                    b.ToTable("EquipmentSpecification");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EquipmentTradeAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("Kilowatt")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeAdId")
                        .HasColumnType("int");

                    b.Property<int>("YearModel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeAdId")
                        .HasName("IX_TradeAdId");

                    b.ToTable("EquipmentTradeAd");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Farm", b =>
                {
                    b.Property<int>("FarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FarmID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddPrimary")
                        .HasColumnType("int");

                    b.Property<int>("AddSecondary")
                        .HasColumnType("int");

                    b.Property<int>("AddWorkers")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmImageId")
                        .HasColumnName("FarmImageID")
                        .HasColumnType("int");

                    b.Property<string>("FarmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmNumber")
                        .HasColumnType("int");

                    b.Property<int>("InfrastructureId")
                        .HasColumnName("InfrastructureID")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Muncipality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestTown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceExclVat")
                        .HasColumnName("PriceExclVAT")
                        .HasColumnType("float");

                    b.Property<double>("PriceIncVat")
                        .HasColumnName("PriceIncVAT")
                        .HasColumnType("float");

                    b.Property<int>("PrimaryBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryBedrooms")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertySize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RouteRouteId")
                        .HasColumnName("Route_RouteId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryBedrooms")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WaterRightsId")
                        .HasColumnName("WaterRightsID")
                        .HasColumnType("int");

                    b.Property<int>("WorkersBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("WorkersBedrooms")
                        .HasColumnType("int");

                    b.Property<string>("WorkersInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmId");

                    b.HasIndex("InfrastructureId")
                        .HasName("IX_InfrastructureID");

                    b.HasIndex("RouteRouteId")
                        .HasName("IX_Route_RouteId");

                    b.HasIndex("WaterRightsId")
                        .HasName("IX_WaterRightsID");

                    b.ToTable("Farm");
                });

            modelBuilder.Entity("FarmboekAPI.Models.FarmImage", b =>
                {
                    b.Property<int>("FarmImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FarmImageID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FarmId")
                        .HasColumnName("FarmID")
                        .HasColumnType("int");

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.HasKey("FarmImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.ToTable("FarmImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.FarmInfrastructure", b =>
                {
                    b.Property<int>("FarmInfrastructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FarmInfrastructureID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FarmId")
                        .HasColumnName("FarmID")
                        .HasColumnType("int");

                    b.Property<int>("InfrastructureId")
                        .HasColumnName("InfrastructureID")
                        .HasColumnType("int");

                    b.Property<string>("InfrastructureName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmInfrastructureId");

                    b.HasIndex("InfrastructureId")
                        .HasName("IX_InfrastructureID");

                    b.ToTable("FarmInfrastructure");
                });

            modelBuilder.Entity("FarmboekAPI.Models.FarmType", b =>
                {
                    b.Property<int>("FarmTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FarmTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drainage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmId")
                        .HasColumnName("FarmID")
                        .HasColumnType("int");

                    b.Property<string>("Fencing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndustryHa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Irrigation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListingFileId")
                        .HasColumnName("ListingFileID")
                        .HasColumnType("int");

                    b.Property<int>("SubGroupId")
                        .HasColumnName("SubGroupID")
                        .HasColumnType("int");

                    b.Property<string>("SubGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuperGroupId")
                        .HasColumnName("SuperGroupID")
                        .HasColumnType("int");

                    b.Property<string>("SuperGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmTypeId");

                    b.ToTable("FarmType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.FarmWaterRight", b =>
                {
                    b.Property<int>("FarmWaterRightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FarmWaterRightID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FarmId")
                        .HasColumnName("FarmID")
                        .HasColumnType("int");

                    b.Property<string>("HaListed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("M3Listed")
                        .HasColumnName("m3Listed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WaterRightId")
                        .HasColumnName("WaterRightID")
                        .HasColumnType("int");

                    b.Property<string>("WaterRightName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmWaterRightId");

                    b.HasIndex("WaterRightId")
                        .HasName("IX_WaterRightID");

                    b.ToTable("FarmWaterRight");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Function", b =>
                {
                    b.Property<int>("FunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FunctionID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FunctionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FunctionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("FunctionId");

                    b.ToTable("Function");
                });

            modelBuilder.Entity("FarmboekAPI.Models.GameAndLivestockTradeAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnimalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TradeAdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeAdId")
                        .HasName("IX_TradeAdId");

                    b.ToTable("GameAndLivestockTradeAd");
                });

            modelBuilder.Entity("FarmboekAPI.Models.GroupChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ChatMessageId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatGroupId")
                        .HasName("IX_ChatGroupId");

                    b.HasIndex("ChatMessageId")
                        .HasName("IX_ChatMessageId");

                    b.HasIndex("SenderId")
                        .HasName("IX_SenderId");

                    b.ToTable("GroupChatMessage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.GroupList", b =>
                {
                    b.Property<int>("GroupListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupListDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupListName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCommercial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInformation")
                        .HasColumnType("bit");

                    b.HasKey("GroupListId");

                    b.ToTable("GroupList");
                });

            modelBuilder.Entity("FarmboekAPI.Models.GroupSubGroups", b =>
                {
                    b.Property<int>("GroupSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("SubGroupId")
                        .HasColumnType("int");

                    b.HasKey("GroupSubGroupId");

                    b.HasIndex("GroupId")
                        .HasName("IX_GroupId");

                    b.HasIndex("SubGroupId")
                        .HasName("IX_SubGroupId");

                    b.ToTable("GroupSubGroups");
                });

            modelBuilder.Entity("FarmboekAPI.Models.GroupSuperGroups", b =>
                {
                    b.Property<int>("GroupSuperGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("SuperGroupId")
                        .HasColumnType("int");

                    b.HasKey("GroupSuperGroupId");

                    b.HasIndex("GroupId")
                        .HasName("IX_GroupId");

                    b.HasIndex("SuperGroupId")
                        .HasName("IX_SuperGroupId");

                    b.ToTable("GroupSuperGroups");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Groups", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCommercial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInformation")
                        .HasColumnType("bit");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("ClassifiedAdId")
                        .HasColumnType("int");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFilename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("ClassifiedAdId")
                        .HasName("IX_ClassifiedAdId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Infrastructure", b =>
                {
                    b.Property<int>("InfrastructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InfrastructureID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InfrastructureId");

                    b.ToTable("Infrastructure");
                });

            modelBuilder.Entity("FarmboekAPI.Models.InfrastructureTradeAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeAdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeAdId")
                        .HasName("IX_TradeAdId");

                    b.ToTable("InfrastructureTradeAd");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstitutionId");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Likes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateLiked")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("FarmboekAPI.Models.LinkRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("datetime");

                    b.Property<int>("LinkRequestTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Requestor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandId");

                    b.HasIndex("LinkRequestTypeId")
                        .HasName("IX_LinkRequestTypeId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.ToTable("LinkRequest");
                });

            modelBuilder.Entity("FarmboekAPI.Models.LinkRequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LinkRequestType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ListType", b =>
                {
                    b.Property<int>("ListTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasActiveIngredient")
                        .HasColumnType("bit");

                    b.Property<bool>("HasExternalLink")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRating")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRemedy")
                        .HasColumnType("bit");

                    b.Property<string>("ListTypeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ListTypeId");

                    b.ToTable("ListType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ListingEntry", b =>
                {
                    b.Property<int>("ListingEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveIngredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExernalLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCommercial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInformation")
                        .HasColumnType("bit");

                    b.Property<string>("ListingEntryDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListingEntryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Remedy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ListingEntryId");

                    b.ToTable("ListingEntry");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ListingFile", b =>
                {
                    b.Property<int>("ListingFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFilename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ListingFileId");

                    b.ToTable("ListingFile");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ManagementGroup", b =>
                {
                    b.Property<int>("ManagementGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagementGroupId");

                    b.ToTable("ManagementGroup");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("bit");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Market", b =>
                {
                    b.Property<int>("MarketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("MarketId");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MarketPdf", b =>
                {
                    b.Property<int>("MarketPdfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MarketPDFID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("MarketId")
                        .HasColumnType("int");

                    b.HasKey("MarketPdfid");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("MarketId")
                        .HasName("IX_MarketId");

                    b.ToTable("MarketPDF");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MarketRoute", b =>
                {
                    b.Property<int>("MarketRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MarketId")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("MarketRouteId");

                    b.HasIndex("MarketId")
                        .HasName("IX_MarketId");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.ToTable("MarketRoute");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MediaDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MediaCatagories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatagoryId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MediaCatagories");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MediaProductLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntryId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MediaProductLinks");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MediaRemediesLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MediaRemediesLinks");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MenuType", b =>
                {
                    b.Property<int>("MenuTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MenuTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuTypeId");

                    b.ToTable("MenuType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("ImageMessageImageId")
                        .HasColumnName("Image_MessageImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInfoMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RecipientUserId")
                        .HasColumnName("Recipient_UserId")
                        .HasColumnType("int");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("SenderUserId")
                        .HasColumnName("Sender_UserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageMessageImageId")
                        .HasName("IX_Image_MessageImageId");

                    b.HasIndex("RecipientUserId")
                        .HasName("IX_Recipient_UserId");

                    b.HasIndex("SenderUserId")
                        .HasName("IX_Sender_UserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MessageImage", b =>
                {
                    b.Property<int>("MessageImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("MessageImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.ToTable("MessageImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ContextKey")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("MigrationId", "ContextKey");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MunicipalDistrict", b =>
                {
                    b.Property<int>("MunicipalDistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("MunicipalDistrictId");

                    b.HasIndex("ProvinceId")
                        .HasName("IX_ProvinceId");

                    b.ToTable("MunicipalDistrict");
                });

            modelBuilder.Entity("FarmboekAPI.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewsCatId")
                        .HasColumnType("int");

                    b.HasKey("NewsId");

                    b.HasIndex("NewsCatId")
                        .HasName("IX_NewsCatId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("FarmboekAPI.Models.NewsCat", b =>
                {
                    b.Property<int>("NewsCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsCatId");

                    b.ToTable("NewsCat");
                });

            modelBuilder.Entity("FarmboekAPI.Models.NewsImage", b =>
                {
                    b.Property<int>("NewsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.HasKey("NewsImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("NewsId")
                        .HasName("IX_NewsId");

                    b.ToTable("NewsImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Page", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageKeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageSubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PageId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Problem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuTypeId")
                        .HasColumnName("MenuTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ProblemBaseId")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("ProblemId");

                    b.HasIndex("MenuTypeId")
                        .HasName("IX_MenuTypeID");

                    b.HasIndex("ProblemBaseId")
                        .HasName("IX_ProblemBaseId");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.ToTable("Problem");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProblemAttachment", b =>
                {
                    b.Property<int>("ProblemAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemBaseId")
                        .HasColumnType("int");

                    b.HasKey("ProblemAttachmentId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("ProblemBaseId")
                        .HasName("IX_ProblemBaseId");

                    b.ToTable("ProblemAttachment");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProblemBase", b =>
                {
                    b.Property<int>("ProblemBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntryTypeId")
                        .HasColumnName("EntryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Epidemiology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Morbidity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProblemBaseId");

                    b.HasIndex("EntryTypeId")
                        .HasName("IX_EntryTypeID");

                    b.ToTable("ProblemBase");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProblemImage", b =>
                {
                    b.Property<int>("ProblemImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemBaseId")
                        .HasColumnType("int");

                    b.HasKey("ProblemImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("ProblemBaseId")
                        .HasName("IX_ProblemBaseId");

                    b.ToTable("ProblemImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProblemSymptom", b =>
                {
                    b.Property<int>("ProblemSymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProblemProblemId")
                        .HasColumnName("Problem_ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomSymptomId")
                        .HasColumnName("Symptom_SymptomId")
                        .HasColumnType("int");

                    b.HasKey("ProblemSymptomId");

                    b.HasIndex("ProblemProblemId")
                        .HasName("IX_Problem_ProblemId");

                    b.HasIndex("SymptomSymptomId")
                        .HasName("IX_Symptom_SymptomId");

                    b.ToTable("ProblemSymptom");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProblemType", b =>
                {
                    b.Property<int>("ProblemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProblemTypeId");

                    b.ToTable("ProblemType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuTypeId")
                        .HasColumnName("MenuTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("MenuTypeId")
                        .HasName("IX_MenuTypeID");

                    b.HasIndex("ProductBaseId")
                        .HasName("IX_ProductBaseId");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductActiveIngredient", b =>
                {
                    b.Property<int>("ProductActiveIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiveIngredientId")
                        .HasColumnType("int");

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.HasKey("ProductActiveIngredientId");

                    b.HasIndex("ActiveIngredientId")
                        .HasName("IX_ActiveIngredientId");

                    b.HasIndex("ProductBaseId")
                        .HasName("IX_ProductBaseId");

                    b.ToTable("ProductActiveIngredient");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductAttachment", b =>
                {
                    b.Property<int>("ProductAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.HasKey("ProductAttachmentId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("ProductBaseId")
                        .HasName("IX_ProductBaseId");

                    b.ToTable("ProductAttachment");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductBase", b =>
                {
                    b.Property<int>("ProductBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<bool?>("BrandProductDisplay")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brandProductDisplay")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Concentration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryTypeId")
                        .HasColumnName("EntryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Formulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Registration")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductBaseId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandID");

                    b.HasIndex("EntryTypeId")
                        .HasName("IX_EntryTypeID");

                    b.ToTable("ProductBase");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductBaseRemedyType", b =>
                {
                    b.Property<int>("ProductBaseRemedyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.Property<int>("RemedyTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductBaseRemedyTypeId");

                    b.HasIndex("ProductBaseId")
                        .HasName("IX_ProductBaseId");

                    b.HasIndex("RemedyTypeId")
                        .HasName("IX_RemedyTypeId");

                    b.ToTable("ProductBaseRemedyType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("ProductBaseId")
                        .HasName("IX_ProductBaseId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductSpecification", b =>
                {
                    b.Property<int>("ProductSpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.Property<int>("SpecificationSpecificationId")
                        .HasColumnName("Specification_SpecificationId")
                        .HasColumnType("int");

                    b.HasKey("ProductSpecificationId");

                    b.HasIndex("ProductBaseId")
                        .HasName("IX_ProductBaseId");

                    b.HasIndex("SpecificationSpecificationId")
                        .HasName("IX_Specification_SpecificationId");

                    b.ToTable("ProductSpecification");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProfileType", b =>
                {
                    b.Property<int>("ProfileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileTypeId");

                    b.ToTable("ProfileType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.PropertyAdditional", b =>
                {
                    b.Property<int>("PropertyAdditionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PropertyAdditionalID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropId")
                        .HasColumnName("PropID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("PropertyAdditionalId");

                    b.ToTable("PropertyAdditional");
                });

            modelBuilder.Entity("FarmboekAPI.Models.PropertyAdditionalImage", b =>
                {
                    b.Property<int>("PropAddId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PropAddID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyAdditionalId")
                        .HasColumnName("PropertyAdditionalID")
                        .HasColumnType("int");

                    b.HasKey("PropAddId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("PropertyAdditionalId")
                        .HasName("IX_PropertyAdditionalID");

                    b.ToTable("PropertyAdditionalImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.PropertyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyCategory");
                });

            modelBuilder.Entity("FarmboekAPI.Models.PropertyListing", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnName("Address_Line_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnName("Address_Line_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ListingPrice")
                        .HasColumnType("int");

                    b.Property<string>("ListingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfBathrooms")
                        .HasColumnName("noOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("NoOfBedrooms")
                        .HasColumnName("noOfBedrooms")
                        .HasColumnType("int");

                    b.Property<int>("NoOfGarages")
                        .HasColumnName("noOfGarages")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<int>("PropertyCategoryId")
                        .HasColumnName("PropertyCategory_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.HasIndex("PropertyCategoryId")
                        .HasName("IX_PropertyCategory_Id");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("PropertyListing");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId")
                        .HasName("IX_CountryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("FarmboekAPI.Models.RelatedBrand", b =>
                {
                    b.Property<int>("RelatedBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandBrandId")
                        .HasColumnName("Brand_BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ChildBrandId")
                        .HasColumnType("int");

                    b.HasKey("RelatedBrandId");

                    b.HasIndex("BrandBrandId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandId");

                    b.HasIndex("ChildBrandId")
                        .HasName("IX_ChildBrandId");

                    b.ToTable("RelatedBrand");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Remedy", b =>
                {
                    b.Property<int>("RemedyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.HasKey("RemedyId");

                    b.HasIndex("ProblemId")
                        .HasName("IX_ProblemId");

                    b.HasIndex("ProductBaseId")
                        .HasName("IX_ProductBaseId");

                    b.ToTable("Remedy");
                });

            modelBuilder.Entity("FarmboekAPI.Models.RemedyType", b =>
                {
                    b.Property<int>("RemedyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RemedyTypeId");

                    b.ToTable("RemedyType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Representative", b =>
                {
                    b.Property<int>("RepresentativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RepresentativeId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.ToTable("Representative");
                });

            modelBuilder.Entity("FarmboekAPI.Models.RepresentativeImage", b =>
                {
                    b.Property<int>("RepresentativeImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("RepresentativeId")
                        .HasColumnType("int");

                    b.HasKey("RepresentativeImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("RepresentativeId")
                        .HasName("IX_RepresentativeId");

                    b.ToTable("RepresentativeImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.RepresentativeProvince", b =>
                {
                    b.Property<int>("RepresentativeProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("RepresentativeId")
                        .HasColumnType("int");

                    b.HasKey("RepresentativeProvinceId");

                    b.HasIndex("ProvinceId")
                        .HasName("IX_ProvinceId");

                    b.HasIndex("RepresentativeId")
                        .HasName("IX_RepresentativeId");

                    b.ToTable("RepresentativeProvince");
                });

            modelBuilder.Entity("FarmboekAPI.Models.RoleFunction", b =>
                {
                    b.Property<int>("RoleFunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleFunctionID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FunctionId")
                        .HasColumnName("FunctionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleID")
                        .HasColumnType("int");

                    b.HasKey("RoleFunctionId");

                    b.HasIndex("FunctionId")
                        .HasName("IX_FunctionID");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleID");

                    b.ToTable("RoleFunction");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("SubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SuperGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("RouteId");

                    b.HasIndex("GroupId")
                        .HasName("IX_GroupId");

                    b.HasIndex("ProblemBaseId")
                        .HasName("IX_ProblemBaseId");

                    b.HasIndex("SectionId")
                        .HasName("IX_SectionId");

                    b.HasIndex("SubGroupId")
                        .HasName("IX_SubGroupId");

                    b.HasIndex("SuperGroupId")
                        .HasName("IX_SuperGroupId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingId");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Shares", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateShared")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SocialMediaCatagory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaCatagories");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Specification", b =>
                {
                    b.Property<int>("SpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecificationId");

                    b.ToTable("Specification");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SubGroupGroupList", b =>
                {
                    b.Property<int>("SubGroupGroupListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ListTypeListTypeId")
                        .HasColumnName("ListType_ListTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SubGroupSubGroupId")
                        .HasColumnName("SubGroup_SubGroupId")
                        .HasColumnType("int");

                    b.HasKey("SubGroupGroupListId");

                    b.HasIndex("ListTypeListTypeId")
                        .HasName("IX_ListType_ListTypeId");

                    b.HasIndex("SubGroupSubGroupId")
                        .HasName("IX_SubGroup_SubGroupId");

                    b.ToTable("SubGroupGroupList");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SubGroups", b =>
                {
                    b.Property<int>("SubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCommercial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInformation")
                        .HasColumnType("bit");

                    b.Property<string>("SubGroupDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubGroupId");

                    b.ToTable("SubGroups");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SuperGroups", b =>
                {
                    b.Property<int>("SuperGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCommercial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInformation")
                        .HasColumnType("bit");

                    b.Property<string>("SuperGroupDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuperGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuperGroupId");

                    b.ToTable("SuperGroups");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("HasPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierPostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierTel1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierTel2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.HasIndex("CountryId")
                        .HasName("IX_CountryId");

                    b.HasIndex("ProvinceId")
                        .HasName("IX_ProvinceId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierBrand", b =>
                {
                    b.Property<int>("SupplierBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplierBrandId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.ToTable("SupplierBrand");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierBrand1", b =>
                {
                    b.Property<int>("SupplierSupplierId")
                        .HasColumnName("Supplier_SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("BrandBrandId")
                        .HasColumnName("Brand_BrandId")
                        .HasColumnType("int");

                    b.HasKey("SupplierSupplierId", "BrandBrandId");

                    b.HasIndex("BrandBrandId")
                        .HasName("IX_Brand_BrandId");

                    b.HasIndex("SupplierSupplierId")
                        .HasName("IX_Supplier_SupplierId");

                    b.ToTable("SupplierBrand1");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierImage", b =>
                {
                    b.Property<int>("SupplierImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplierImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.ToTable("SupplierImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierMunicipalDistrict", b =>
                {
                    b.Property<int>("SupplierMunicipalDistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MunicipalDistrictId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplierMunicipalDistrictId");

                    b.HasIndex("MunicipalDistrictId")
                        .HasName("IX_MunicipalDistrictId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.ToTable("SupplierMunicipalDistrict");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierProduct", b =>
                {
                    b.Property<int>("SupplierProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<bool>("Display")
                        .HasColumnType("bit");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("RouteRouteId")
                        .HasColumnName("Route_RouteId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplierProductId");

                    b.HasIndex("EntryId");

                    b.HasIndex("ProductBaseId");

                    b.HasIndex("RouteRouteId")
                        .HasName("IX_Route_RouteId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.ToTable("SupplierProduct");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierTown", b =>
                {
                    b.Property<int>("SupplierTownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("SupplierTownId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.HasIndex("TownId")
                        .HasName("IX_TownId");

                    b.ToTable("SupplierTown");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SymptomId");

                    b.ToTable("Symptom");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TopLevelItem", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Code");

                    b.ToTable("TopLevelItem");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Town", b =>
                {
                    b.Property<int>("TownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProvinceProvinceId")
                        .HasColumnName("Province_ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("TownCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TownName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TownId");

                    b.HasIndex("ProvinceProvinceId")
                        .HasName("IX_Province_ProvinceId");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Tractor", b =>
                {
                    b.Property<int>("TractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuTypeId")
                        .HasColumnName("MenuTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("TractorBaseId")
                        .HasColumnType("int");

                    b.HasKey("TractorId");

                    b.HasIndex("MenuTypeId")
                        .HasName("IX_MenuTypeID");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.HasIndex("TractorBaseId")
                        .HasName("IX_TractorBaseId");

                    b.ToTable("Tractor");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TractorBase", b =>
                {
                    b.Property<int>("TractorBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aspiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("Cab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiffLock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Displacementcm3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineMake")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnginePowerkw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryTypeId")
                        .HasColumnName("EntryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("FueltankCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroundClearancemm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeightCabmm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeightRopsmm")
                        .HasColumnName("HeightROPSmm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiftCapacitykg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxPowerEngineSpeedrpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxTorque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxTorqueEngineSpeedrpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoOfCylinders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallLenghtmm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PtoPowerkw")
                        .HasColumnName("PTO_Powerkw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PtoSpeed")
                        .HasColumnName("PTO_Speed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PumpFlowOptionlpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PumpFlowStandardlpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecificationId")
                        .HasColumnName("SpecificationID")
                        .HasColumnType("int");

                    b.Property<string>("StandardWidthmm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackWidthMaxmm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackWidthMinmm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionSpeeds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TurningRadiusmm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TyreSizeFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TyreSizeRear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weightkg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wheelbasemm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TractorBaseId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandID");

                    b.HasIndex("EntryTypeId")
                        .HasName("IX_EntryTypeID");

                    b.HasIndex("SpecificationId")
                        .HasName("IX_SpecificationID");

                    b.ToTable("TractorBase");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TractorImage", b =>
                {
                    b.Property<int>("TractorImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("TractorBaseId")
                        .HasColumnType("int");

                    b.HasKey("TractorImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("TractorBaseId")
                        .HasName("IX_TractorBaseId");

                    b.ToTable("TractorImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TradeAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptTradeSafe")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompletionDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeeAllocation")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("PriceIncludesVat")
                        .HasColumnType("bit");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SuperGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .HasName("IX_GroupId");

                    b.HasIndex("ProvinceId")
                        .HasName("IX_ProvinceId");

                    b.HasIndex("SellerId")
                        .HasName("IX_SellerId");

                    b.HasIndex("SubGroupId")
                        .HasName("IX_SubGroupId");

                    b.HasIndex("SuperGroupId")
                        .HasName("IX_SuperGroupId");

                    b.HasIndex("TownId")
                        .HasName("IX_TownId");

                    b.ToTable("TradeAd");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TradeAdContactLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TradeAdId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeAdId")
                        .HasName("IX_TradeAdId");

                    b.HasIndex("UserProfileId")
                        .HasName("IX_UserProfileId");

                    b.ToTable("TradeAdContactLog");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TradeAdImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("TradeAdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("TradeAdId")
                        .HasName("IX_TradeAdId");

                    b.ToTable("TradeAdImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TradeAdTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Accepted")
                        .HasColumnType("datetime");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<double>("OfferAmount")
                        .HasColumnType("float");

                    b.Property<string>("Step")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeAdId")
                        .HasColumnType("int");

                    b.Property<string>("TradeSafeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TradeSafeReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId")
                        .HasName("IX_BuyerId");

                    b.HasIndex("TradeAdId")
                        .HasName("IX_TradeAdId");

                    b.ToTable("TradeAdTransaction");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TradeSafeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TradeSafeLog");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TraderProfileSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankAccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountTypeId")
                        .HasName("IX_BankAccountTypeId");

                    b.HasIndex("BankId")
                        .HasName("IX_BankId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("TraderProfileSnapshot");
                });

            modelBuilder.Entity("FarmboekAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("cellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankAccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountTypeId")
                        .HasName("IX_BankAccountTypeId");

                    b.HasIndex("BankId")
                        .HasName("IX_BankId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("UserBankAccount");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserFavouriteTradeAd", b =>
                {
                    b.Property<int>("UserFavouriteTradeAdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserFavouriteTradeAdID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TradeAdId")
                        .HasColumnName("TradeAdID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserFavouriteTradeAdId");

                    b.HasIndex("TradeAdId")
                        .HasName("IX_TradeAdID");

                    b.HasIndex("UserId")
                        .HasName("IX_UserID");

                    b.ToTable("UserFavouriteTradeAd");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserImage", b =>
                {
                    b.Property<int>("UserImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("UserImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserIndustries", b =>
                {
                    b.Property<int>("UiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uiId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Answered")
                        .HasColumnType("bit");

                    b.Property<int>("ClickCounter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("GetInfo")
                        .HasColumnType("bit");

                    b.Property<int?>("IndustryGroupId")
                        .HasColumnName("Industry_GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUserId")
                        .HasColumnName("User_UserId")
                        .HasColumnType("int");

                    b.HasKey("UiId");

                    b.HasIndex("IndustryGroupId")
                        .HasName("IX_Industry_GroupId");

                    b.HasIndex("UserUserId")
                        .HasName("IX_User_UserId");

                    b.ToTable("UserIndustries");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LogOutTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LoginInTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserLog");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressIdAddressTypeId")
                        .HasColumnName("AddressId_AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubUser")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentUserUserId")
                        .HasColumnName("ParentUser_UserId")
                        .HasColumnType("int");

                    b.Property<string>("SouthAfricanIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserTypeUserTypeId")
                        .HasColumnName("UserType_UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("AddressIdAddressTypeId")
                        .HasName("IX_AddressId_AddressTypeId");

                    b.HasIndex("ParentUserUserId")
                        .HasName("IX_ParentUser_UserId");

                    b.HasIndex("UserTypeUserTypeId")
                        .HasName("IX_UserType_UserTypeId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserProfileChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatMessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceiverClearedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SenderClearedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .HasName("IX_ChatMessageId");

                    b.HasIndex("ReceiverId")
                        .HasName("IX_ReceiverId");

                    b.HasIndex("SenderId")
                        .HasName("IX_SenderId");

                    b.ToTable("UserProfileChatMessage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserRoute", b =>
                {
                    b.Property<int>("UserRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("UserRouteId");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("UserRoute");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessLevelAccessTypeId")
                        .HasColumnName("AccessLevel_AccessTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTypeEmployeeTypeId")
                        .HasColumnName("EmployeeType_EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileTypeProfileTypeId")
                        .HasColumnName("ProfileType_ProfileTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserTypeId");

                    b.HasIndex("AccessLevelAccessTypeId")
                        .HasName("IX_AccessLevel_AccessTypeId");

                    b.HasIndex("EmployeeTypeEmployeeTypeId")
                        .HasName("IX_EmployeeType_EmployeeTypeId");

                    b.HasIndex("ProfileTypeProfileTypeId")
                        .HasName("IX_ProfileType_ProfileTypeId");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserWeatherSetting", b =>
                {
                    b.Property<int>("UserWeatherSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultLatitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultLongitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserWeatherSettingId");

                    b.ToTable("UserWeatherSetting");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuTypeId")
                        .HasColumnName("MenuTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleBaseId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("MenuTypeId")
                        .HasName("IX_MenuTypeID");

                    b.HasIndex("RouteId")
                        .HasName("IX_RouteId");

                    b.HasIndex("VehicleBaseId")
                        .HasName("IX_VehicleBaseId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("FarmboekAPI.Models.VehicleBase", b =>
                {
                    b.Property<int>("VehicleBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acceleration0100kmh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyShape")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("CylinderLayout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cylinders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivenWheelsQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineSizeLitre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryTypeId")
                        .HasColumnName("EntryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GearRatiosQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GearShift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaximumTopSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerMaximumTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerPeakRevs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Segment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecificationId")
                        .HasColumnName("SpecificationID")
                        .HasColumnType("int");

                    b.Property<string>("TorqueMaximumDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TorqueMaximumTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TorqueOverBoost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TorqueOverBoostPeakRevs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TorquePeakRevs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleBaseId");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandID");

                    b.HasIndex("EntryTypeId")
                        .HasName("IX_EntryTypeID");

                    b.HasIndex("SpecificationId")
                        .HasName("IX_SpecificationID");

                    b.ToTable("VehicleBase");
                });

            modelBuilder.Entity("FarmboekAPI.Models.VehicleImage", b =>
                {
                    b.Property<int>("VehicleImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingFileId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleBaseId")
                        .HasColumnType("int");

                    b.HasKey("VehicleImageId");

                    b.HasIndex("ListingFileId")
                        .HasName("IX_ListingFileId");

                    b.HasIndex("VehicleBaseId")
                        .HasName("IX_VehicleBaseId");

                    b.ToTable("VehicleImage");
                });

            modelBuilder.Entity("FarmboekAPI.Models.VehicleTradeAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOther")
                        .HasColumnName("isOther")
                        .HasColumnType("bit");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ServiceHistory")
                        .HasColumnType("bit");

                    b.Property<int>("TradeAdId")
                        .HasColumnType("int");

                    b.Property<int>("YearModel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandId");

                    b.HasIndex("TradeAdId")
                        .HasName("IX_TradeAdId");

                    b.ToTable("VehicleTradeAd");
                });

            modelBuilder.Entity("FarmboekAPI.Models.WaterRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WaterRights");
                });

            modelBuilder.Entity("FarmboekAPI.Models.WebpagesMembership", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmationToken")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPasswordFailureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("PasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PasswordFailuresSinceLastSuccess")
                        .HasColumnType("int");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PasswordVerificationToken")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("PasswordVerificationTokenExpirationDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId");

                    b.ToTable("webpages_Membership");
                });

            modelBuilder.Entity("FarmboekAPI.Models.WebpagesOauthMembership", b =>
                {
                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ProviderUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Provider", "ProviderUserId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("webpages_OAuthMembership");
                });

            modelBuilder.Entity("FarmboekAPI.Models.WebpagesRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("RoleId");

                    b.ToTable("webpages_Roles");
                });

            modelBuilder.Entity("FarmboekAPI.Models.WebpagesUsersInRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("webpages_UsersInRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Address", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Country", "PostalCountryIdCountry")
                        .WithMany("Address")
                        .HasForeignKey("PostalCountryIdCountryId")
                        .HasConstraintName("FK_dbo.Address_dbo.Country_PostalCountryId_CountryId");

                    b.HasOne("FarmboekAPI.Models.Province", "PostalProvinceIdProvince")
                        .WithMany("Address")
                        .HasForeignKey("PostalProvinceIdProvinceId")
                        .HasConstraintName("FK_dbo.Address_dbo.Province_PostalProvinceId_ProvinceId");

                    b.HasOne("FarmboekAPI.Models.Town", "PostalTownIdTown")
                        .WithMany("Address")
                        .HasForeignKey("PostalTownIdTownId")
                        .HasConstraintName("FK_dbo.Address_dbo.Town_PostalTownId_TownId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Advertisement", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("Advertisement")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.Advertisement_dbo.Brand_BrandId");

                    b.HasOne("FarmboekAPI.Models.Supplier", "Supplier")
                        .WithMany("Advertisement")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_dbo.Advertisement_dbo.Supplier_SupplierId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.AdvertisementImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Advertisement", "Advertisement")
                        .WithMany("AdvertisementImage")
                        .HasForeignKey("AdvertisementId")
                        .HasConstraintName("FK_dbo.AdvertisementImage_dbo.Advertisement_AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("AdvertisementImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.AdvertisementImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.AdvertisementRoute", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Advertisement", "Advertisement")
                        .WithMany("AdvertisementRoute")
                        .HasForeignKey("AdvertisementId")
                        .HasConstraintName("FK_dbo.AdvertisementRoute_dbo.Advertisement_AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("AdvertisementRoute")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.AdvertisementRoute_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.AuctionItems", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Auctions", "Auction")
                        .WithMany("AuctionItems")
                        .HasForeignKey("AuctionId")
                        .HasConstraintName("FK_dbo.AuctionItems_dbo.Auctions_AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Auctions", b =>
                {
                    b.HasOne("FarmboekAPI.Models.AuctionCategory", "AuctionCategory")
                        .WithMany("Auctions")
                        .HasForeignKey("AuctionCategoryId")
                        .HasConstraintName("FK_dbo.Auctions_dbo.AuctionCategory_AuctionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Province", "Province")
                        .WithMany("Auctions")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_dbo.Auctions_dbo.Province_ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Town", "Town")
                        .WithMany("Auctions")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_dbo.Auctions_dbo.Town_TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "User")
                        .WithMany("Auctions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.Auctions_dbo.UserProfile_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Branch", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Agency", "Agency")
                        .WithMany("Branch")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_dbo.Branch_dbo.Agency_AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Province", "Province")
                        .WithMany("Branch")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_dbo.Branch_dbo.Province_ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Town", "Town")
                        .WithMany("Branch")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_dbo.Branch_dbo.Town_TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Brand", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Contact", "Contact")
                        .WithMany("Brand")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_dbo.Brand_dbo.Contact_ContactId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.BrandImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("BrandImage")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.BrandImage_dbo.Brand_BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("BrandImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.BrandImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.BusinessEntity", b =>
                {
                    b.HasOne("FarmboekAPI.Models.BusinessEntityBase", "BusinessEntityBase")
                        .WithMany("BusinessEntity")
                        .HasForeignKey("BusinessEntityBaseId")
                        .HasConstraintName("FK_dbo.BusinessEntity_dbo.BusinessEntityBase_BusinessEntityBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("BusinessEntity")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.BusinessEntity_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.BusinessEntityImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.BusinessEntityBase", "BusinessEntityBase")
                        .WithMany("BusinessEntityImage")
                        .HasForeignKey("BusinessEntityBaseId")
                        .HasConstraintName("FK_dbo.BusinessEntityImage_dbo.BusinessEntityBase_BusinessEntityBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("BusinessEntityImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.BusinessEntityImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.BusinessEntityTypeAssignment", b =>
                {
                    b.HasOne("FarmboekAPI.Models.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityTypeAssignment")
                        .HasForeignKey("BusinessEntityId")
                        .HasConstraintName("FK_dbo.BusinessEntityTypeAssignment_dbo.BusinessEntity_BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.BusinessEntityType", "BusinessEntityType")
                        .WithMany("BusinessEntityTypeAssignment")
                        .HasForeignKey("BusinessEntityTypeId")
                        .HasConstraintName("FK_dbo.BusinessEntityTypeAssignment_dbo.BusinessEntityType_BusinessEntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ChatGroup", b =>
                {
                    b.HasOne("FarmboekAPI.Models.UserProfile", "CreatedUser")
                        .WithMany("ChatGroup")
                        .HasForeignKey("CreatedUserId")
                        .HasConstraintName("FK_dbo.ChatGroup_dbo.UserProfile_CreatedUserId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("ChatGroup")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.ChatGroup_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ChatGroupUserBan", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ChatGroup", "ChatGroup")
                        .WithMany("ChatGroupUserBan")
                        .HasForeignKey("ChatGroupId")
                        .HasConstraintName("FK_dbo.ChatGroupUserBan_dbo.ChatGroup_ChatGroupId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "CreatedUser")
                        .WithMany("ChatGroupUserBanCreatedUser")
                        .HasForeignKey("CreatedUserId")
                        .HasConstraintName("FK_dbo.ChatGroupUserBan_dbo.UserProfile_CreatedUserId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "UserProfile")
                        .WithMany("ChatGroupUserBanUserProfile")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("FK_dbo.ChatGroupUserBan_dbo.UserProfile_UserProfileId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ChatMessage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFileImage")
                        .WithMany("ChatMessageListingFileImage")
                        .HasForeignKey("ListingFileImageId")
                        .HasConstraintName("FK_dbo.ChatMessage_dbo.ListingFile_ListingFileImageId");

                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFileVideo")
                        .WithMany("ChatMessageListingFileVideo")
                        .HasForeignKey("ListingFileVideoId")
                        .HasConstraintName("FK_dbo.ChatMessage_dbo.ListingFile_ListingFileVideoId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.ClassifiedAd", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ClassifiedsCategories", "ClassifiedAdCategory")
                        .WithMany("ClassifiedAd")
                        .HasForeignKey("ClassifiedAdCategoryId")
                        .HasConstraintName("FK_dbo.ClassifiedAd_dbo.ClassifiedsCategories_ClassifiedAdCategory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ClassifiedAdRegion", "ClassifiedAdRegion")
                        .WithMany("ClassifiedAd")
                        .HasForeignKey("ClassifiedAdRegionId")
                        .HasConstraintName("FK_dbo.ClassifiedAd_dbo.ClassifiedAdRegion_ClassifiedAdRegion_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "UserUser")
                        .WithMany("ClassifiedAd")
                        .HasForeignKey("UserUserId")
                        .HasConstraintName("FK_dbo.ClassifiedAd_dbo.UserProfile_User_UserId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Combine", b =>
                {
                    b.HasOne("FarmboekAPI.Models.CombineBase", "CombineBase")
                        .WithMany("Combine")
                        .HasForeignKey("CombineBaseId")
                        .HasConstraintName("FK_dbo.Combine_dbo.CombineBase_CombineBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.MenuType", "MenuType")
                        .WithMany("Combine")
                        .HasForeignKey("MenuTypeId")
                        .HasConstraintName("FK_dbo.Combine_dbo.MenuType_MenuTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("Combine")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.Combine_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.CombineBase", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("CombineBase")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.CombineBase_dbo.Brand_BrandID");

                    b.HasOne("FarmboekAPI.Models.EntryType", "EntryType")
                        .WithMany("CombineBase")
                        .HasForeignKey("EntryTypeId")
                        .HasConstraintName("FK_dbo.CombineBase_dbo.EntryType_EntryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.CombineImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.CombineBase", "CombineBase")
                        .WithMany("CombineImage")
                        .HasForeignKey("CombineBaseId")
                        .HasConstraintName("FK_dbo.CombineImage_dbo.CombineBase_CombineBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("CombineImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.CombineImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.CropTradeAd", b =>
                {
                    b.HasOne("FarmboekAPI.Models.TradeAd", "TradeAd")
                        .WithMany("CropTradeAd")
                        .HasForeignKey("TradeAdId")
                        .HasConstraintName("FK_dbo.CropTradeAd_dbo.TradeAd_TradeAdId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Entity", b =>
                {
                    b.HasOne("FarmboekAPI.Models.CompanyType", "CompanyTypeIdCompanyType")
                        .WithMany("Entity")
                        .HasForeignKey("CompanyTypeIdCompanyTypeId")
                        .HasConstraintName("FK_dbo.Entity_dbo.CompanyType_CompanyTypeId_CompanyTypeId");

                    b.HasOne("FarmboekAPI.Models.EntityAddress", "EntityAddressAddressType")
                        .WithMany("Entity")
                        .HasForeignKey("EntityAddressAddressTypeId")
                        .HasConstraintName("FK_dbo.Entity_dbo.EntityAddress_EntityAddress_AddressTypeId");

                    b.HasOne("FarmboekAPI.Models.UserType", "UserTypeIdUserType")
                        .WithMany("Entity")
                        .HasForeignKey("UserTypeIdUserTypeId")
                        .HasConstraintName("FK_dbo.Entity_dbo.UserType_UserTypeId_UserTypeId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntityAddress", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Country", "PostalCountryIdCountry")
                        .WithMany("EntityAddress")
                        .HasForeignKey("PostalCountryIdCountryId")
                        .HasConstraintName("FK_dbo.EntityAddress_dbo.Country_PostalCountryId_CountryId");

                    b.HasOne("FarmboekAPI.Models.Province", "PostalProvinceIdProvince")
                        .WithMany("EntityAddress")
                        .HasForeignKey("PostalProvinceIdProvinceId")
                        .HasConstraintName("FK_dbo.EntityAddress_dbo.Province_PostalProvinceId_ProvinceId");

                    b.HasOne("FarmboekAPI.Models.Town", "PostalTownIdTown")
                        .WithMany("EntityAddress")
                        .HasForeignKey("PostalTownIdTownId")
                        .HasConstraintName("FK_dbo.EntityAddress_dbo.Town_PostalTownId_TownId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Entry", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("Entry")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.Entry_dbo.Brand_BrandID");

                    b.HasOne("FarmboekAPI.Models.EntryTypeTemplate", "EntryTypeTemplate")
                        .WithMany("Entry")
                        .HasForeignKey("EntryTypeTemplateId")
                        .HasConstraintName("FK_dbo.Entry_dbo.EntryTypeTemplate_EntryTypeTemplateID");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryAttribute", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Attribute", "Attribute")
                        .WithMany("EntryAttribute")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("FK_dbo.EntryAttribute_dbo.Attribute_AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Entry", "Entry")
                        .WithMany("EntryAttribute")
                        .HasForeignKey("EntryId")
                        .HasConstraintName("FK_dbo.EntryAttribute_dbo.Entry_EntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryHeader", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Entry", "Entry")
                        .WithMany("EntryHeader")
                        .HasForeignKey("EntryId")
                        .HasConstraintName("FK_dbo.EntryHeader_dbo.Entry_EntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("EntryHeader")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.EntryHeader_dbo.Route_RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Entry", "Entry")
                        .WithMany("EntryImage")
                        .HasForeignKey("EntryId")
                        .HasConstraintName("FK_dbo.EntryImage_dbo.Entry_EntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("EntryImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.EntryImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryPdf", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Entry", "Entry")
                        .WithMany("EntryPdf")
                        .HasForeignKey("EntryId")
                        .HasConstraintName("FK_dbo.EntryPDF_dbo.Entry_EntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("EntryPdf")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.EntryPDF_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.EntryTypeTemplateAttribute", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Attribute", "Attribute")
                        .WithMany("EntryTypeTemplateAttribute")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("FK_dbo.EntryTypeTemplateAttribute_dbo.Attribute_AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.EntryTypeTemplate", "EntryTypeTemplate")
                        .WithMany("EntryTypeTemplateAttribute")
                        .HasForeignKey("EntryTypeTemplateId")
                        .HasConstraintName("FK_dbo.EntryTypeTemplateAttribute_dbo.EntryTypeTemplate_EntryTypeTemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Equipment", b =>
                {
                    b.HasOne("FarmboekAPI.Models.EquipmentBase", "EquipmentBase")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentBaseId")
                        .HasConstraintName("FK_dbo.Equipment_dbo.EquipmentBase_EquipmentBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.MenuType", "MenuType")
                        .WithMany("Equipment")
                        .HasForeignKey("MenuTypeId")
                        .HasConstraintName("FK_dbo.Equipment_dbo.MenuType_MenuTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("Equipment")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.Equipment_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.EquipmentBase", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("EquipmentBase")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.EquipmentBase_dbo.Brand_BrandID");

                    b.HasOne("FarmboekAPI.Models.EntryType", "EntryType")
                        .WithMany("EquipmentBase")
                        .HasForeignKey("EntryTypeId")
                        .HasConstraintName("FK_dbo.EquipmentBase_dbo.EntryType_EntryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "SpecificationListingFile")
                        .WithMany("EquipmentBase")
                        .HasForeignKey("SpecificationListingFileId")
                        .HasConstraintName("FK_dbo.EquipmentBase_dbo.ListingFile_Specification_ListingFileId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.EquipmentImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.EquipmentBase", "EquipmentBase")
                        .WithMany("EquipmentImage")
                        .HasForeignKey("EquipmentBaseId")
                        .HasConstraintName("FK_dbo.EquipmentImage_dbo.EquipmentBase_EquipmentBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("EquipmentImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.EquipmentImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.EquipmentSpecification", b =>
                {
                    b.HasOne("FarmboekAPI.Models.EquipmentBase", "EquipmentBaseEquipmentBase")
                        .WithMany("EquipmentSpecification")
                        .HasForeignKey("EquipmentBaseEquipmentBaseId")
                        .HasConstraintName("FK_dbo.EquipmentSpecification_dbo.EquipmentBase_EquipmentBase_EquipmentBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Specification", "SpecificationSpecification")
                        .WithMany("EquipmentSpecification")
                        .HasForeignKey("SpecificationSpecificationId")
                        .HasConstraintName("FK_dbo.EquipmentSpecification_dbo.Specification_Specification_SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.EquipmentTradeAd", b =>
                {
                    b.HasOne("FarmboekAPI.Models.TradeAd", "TradeAd")
                        .WithMany("EquipmentTradeAd")
                        .HasForeignKey("TradeAdId")
                        .HasConstraintName("FK_dbo.EquipmentTradeAd_dbo.TradeAd_TradeAdId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Farm", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Infrastructure", "Infrastructure")
                        .WithMany("Farm")
                        .HasForeignKey("InfrastructureId")
                        .HasConstraintName("FK_dbo.Farm_dbo.Infrastructure_InfrastructureID")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "RouteRoute")
                        .WithMany("Farm")
                        .HasForeignKey("RouteRouteId")
                        .HasConstraintName("FK_dbo.Farm_dbo.Route_Route_RouteId");

                    b.HasOne("FarmboekAPI.Models.WaterRights", "WaterRights")
                        .WithMany("Farm")
                        .HasForeignKey("WaterRightsId")
                        .HasConstraintName("FK_dbo.Farm_dbo.WaterRights_WaterRightsID")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.FarmImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("FarmImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.FarmImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.FarmInfrastructure", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Infrastructure", "Infrastructure")
                        .WithMany("FarmInfrastructure")
                        .HasForeignKey("InfrastructureId")
                        .HasConstraintName("FK_dbo.FarmInfrastructure_dbo.Infrastructure_InfrastructureID")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.FarmWaterRight", b =>
                {
                    b.HasOne("FarmboekAPI.Models.WaterRights", "WaterRight")
                        .WithMany("FarmWaterRight")
                        .HasForeignKey("WaterRightId")
                        .HasConstraintName("FK_dbo.FarmWaterRight_dbo.WaterRights_WaterRightID")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.GameAndLivestockTradeAd", b =>
                {
                    b.HasOne("FarmboekAPI.Models.TradeAd", "TradeAd")
                        .WithMany("GameAndLivestockTradeAd")
                        .HasForeignKey("TradeAdId")
                        .HasConstraintName("FK_dbo.GameAndLivestockTradeAd_dbo.TradeAd_TradeAdId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.GroupChatMessage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ChatGroup", "ChatGroup")
                        .WithMany("GroupChatMessage")
                        .HasForeignKey("ChatGroupId")
                        .HasConstraintName("FK_dbo.GroupChatMessage_dbo.ChatGroup_ChatGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ChatMessage", "ChatMessage")
                        .WithMany("GroupChatMessage")
                        .HasForeignKey("ChatMessageId")
                        .HasConstraintName("FK_dbo.GroupChatMessage_dbo.ChatMessage_ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "Sender")
                        .WithMany("GroupChatMessage")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_dbo.GroupChatMessage_dbo.UserProfile_SenderId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.GroupSubGroups", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Groups", "Group")
                        .WithMany("GroupSubGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_dbo.GroupSubGroups_dbo.Groups_GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.SubGroups", "SubGroup")
                        .WithMany("GroupSubGroups")
                        .HasForeignKey("SubGroupId")
                        .HasConstraintName("FK_dbo.GroupSubGroups_dbo.SubGroups_SubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.GroupSuperGroups", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Groups", "Group")
                        .WithMany("GroupSuperGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_dbo.GroupSuperGroups_dbo.Groups_GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.SuperGroups", "SuperGroup")
                        .WithMany("GroupSuperGroups")
                        .HasForeignKey("SuperGroupId")
                        .HasConstraintName("FK_dbo.GroupSuperGroups_dbo.SuperGroups_SuperGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Image", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ClassifiedAd", "ClassifiedAd")
                        .WithMany("Image")
                        .HasForeignKey("ClassifiedAdId")
                        .HasConstraintName("FK_dbo.Image_dbo.ClassifiedAd_ClassifiedAdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.InfrastructureTradeAd", b =>
                {
                    b.HasOne("FarmboekAPI.Models.TradeAd", "TradeAd")
                        .WithMany("InfrastructureTradeAd")
                        .HasForeignKey("TradeAdId")
                        .HasConstraintName("FK_dbo.InfrastructureTradeAd_dbo.TradeAd_TradeAdId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.LinkRequest", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("LinkRequest")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.LinkRequest_dbo.Brand_BrandId");

                    b.HasOne("FarmboekAPI.Models.LinkRequestType", "LinkRequestType")
                        .WithMany("LinkRequest")
                        .HasForeignKey("LinkRequestTypeId")
                        .HasConstraintName("FK_dbo.LinkRequest_dbo.LinkRequestType_LinkRequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Supplier", "Supplier")
                        .WithMany("LinkRequest")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_dbo.LinkRequest_dbo.Supplier_SupplierId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Manager", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("Manager")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.Manager_dbo.Brand_BrandId");

                    b.HasOne("FarmboekAPI.Models.Supplier", "Supplier")
                        .WithMany("Manager")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_dbo.Manager_dbo.Supplier_SupplierId");

                    b.HasOne("FarmboekAPI.Models.UserProfile", "User")
                        .WithMany("Manager")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.Manager_dbo.UserProfile_UserId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MarketPdf", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("MarketPdf")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.MarketPDF_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Market", "Market")
                        .WithMany("MarketPdf")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_dbo.MarketPDF_dbo.Market_MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.MarketRoute", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Market", "Market")
                        .WithMany("MarketRoute")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_dbo.MarketRoute_dbo.Market_MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("MarketRoute")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.MarketRoute_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Message", b =>
                {
                    b.HasOne("FarmboekAPI.Models.MessageImage", "ImageMessageImage")
                        .WithMany("Message")
                        .HasForeignKey("ImageMessageImageId")
                        .HasConstraintName("FK_dbo.Message_dbo.MessageImage_Image_MessageImageId");

                    b.HasOne("FarmboekAPI.Models.UserProfile", "RecipientUser")
                        .WithMany("MessageRecipientUser")
                        .HasForeignKey("RecipientUserId")
                        .HasConstraintName("FK_dbo.Message_dbo.UserProfile_Recipient_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "SenderUser")
                        .WithMany("MessageSenderUser")
                        .HasForeignKey("SenderUserId")
                        .HasConstraintName("FK_dbo.Message_dbo.UserProfile_Sender_UserId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.MessageImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("MessageImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.MessageImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.MunicipalDistrict", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Province", "Province")
                        .WithMany("MunicipalDistrict")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_dbo.MunicipalDistrict_dbo.Province_ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.News", b =>
                {
                    b.HasOne("FarmboekAPI.Models.NewsCat", "NewsCat")
                        .WithMany("News")
                        .HasForeignKey("NewsCatId")
                        .HasConstraintName("FK_dbo.News_dbo.NewsCat_NewsCatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.NewsImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("NewsImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.NewsImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.News", "News")
                        .WithMany("NewsImage")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK_dbo.NewsImage_dbo.News_NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Problem", b =>
                {
                    b.HasOne("FarmboekAPI.Models.MenuType", "MenuType")
                        .WithMany("Problem")
                        .HasForeignKey("MenuTypeId")
                        .HasConstraintName("FK_dbo.Problem_dbo.MenuType_MenuTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ProblemBase", "ProblemBase")
                        .WithMany("Problem")
                        .HasForeignKey("ProblemBaseId")
                        .HasConstraintName("FK_dbo.Problem_dbo.ProblemBase_ProblemBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("Problem")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.Problem_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProblemAttachment", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("ProblemAttachment")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.ProblemAttachment_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ProblemBase", "ProblemBase")
                        .WithMany("ProblemAttachment")
                        .HasForeignKey("ProblemBaseId")
                        .HasConstraintName("FK_dbo.ProblemAttachment_dbo.ProblemBase_ProblemBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProblemBase", b =>
                {
                    b.HasOne("FarmboekAPI.Models.EntryType", "EntryType")
                        .WithMany("ProblemBase")
                        .HasForeignKey("EntryTypeId")
                        .HasConstraintName("FK_dbo.ProblemBase_dbo.EntryType_EntryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProblemImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("ProblemImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.ProblemImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ProblemBase", "ProblemBase")
                        .WithMany("ProblemImage")
                        .HasForeignKey("ProblemBaseId")
                        .HasConstraintName("FK_dbo.ProblemImage_dbo.ProblemBase_ProblemBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProblemSymptom", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Problem", "ProblemProblem")
                        .WithMany("ProblemSymptom")
                        .HasForeignKey("ProblemProblemId")
                        .HasConstraintName("FK_dbo.ProblemSymptom_dbo.Problem_Problem_ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Symptom", "SymptomSymptom")
                        .WithMany("ProblemSymptom")
                        .HasForeignKey("SymptomSymptomId")
                        .HasConstraintName("FK_dbo.ProblemSymptom_dbo.Symptom_Symptom_SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Product", b =>
                {
                    b.HasOne("FarmboekAPI.Models.MenuType", "MenuType")
                        .WithMany("Product")
                        .HasForeignKey("MenuTypeId")
                        .HasConstraintName("FK_dbo.Product_dbo.MenuType_MenuTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ProductBase", "ProductBase")
                        .WithMany("Product")
                        .HasForeignKey("ProductBaseId")
                        .HasConstraintName("FK_dbo.Product_dbo.ProductBase_ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("Product")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.Product_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductActiveIngredient", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ActiveIngredient", "ActiveIngredient")
                        .WithMany("ProductActiveIngredient")
                        .HasForeignKey("ActiveIngredientId")
                        .HasConstraintName("FK_dbo.ProductActiveIngredient_dbo.ActiveIngredient_ActiveIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ProductBase", "ProductBase")
                        .WithMany("ProductActiveIngredient")
                        .HasForeignKey("ProductBaseId")
                        .HasConstraintName("FK_dbo.ProductActiveIngredient_dbo.ProductBase_ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductAttachment", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("ProductAttachment")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.ProductAttachment_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ProductBase", "ProductBase")
                        .WithMany("ProductAttachment")
                        .HasForeignKey("ProductBaseId")
                        .HasConstraintName("FK_dbo.ProductAttachment_dbo.ProductBase_ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductBase", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("ProductBase")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.ProductBase_dbo.Brand_BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.EntryType", "EntryType")
                        .WithMany("ProductBase")
                        .HasForeignKey("EntryTypeId")
                        .HasConstraintName("FK_dbo.ProductBase_dbo.EntryType_EntryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductBaseRemedyType", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ProductBase", "ProductBase")
                        .WithMany("ProductBaseRemedyType")
                        .HasForeignKey("ProductBaseId")
                        .HasConstraintName("FK_dbo.ProductBaseRemedyType_dbo.ProductBase_ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.RemedyType", "RemedyType")
                        .WithMany("ProductBaseRemedyType")
                        .HasForeignKey("RemedyTypeId")
                        .HasConstraintName("FK_dbo.ProductBaseRemedyType_dbo.RemedyType_RemedyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("ProductImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.ProductImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ProductBase", "ProductBase")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductBaseId")
                        .HasConstraintName("FK_dbo.ProductImage_dbo.ProductBase_ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.ProductSpecification", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ProductBase", "ProductBase")
                        .WithMany("ProductSpecification")
                        .HasForeignKey("ProductBaseId")
                        .HasConstraintName("FK_dbo.ProductSpecification_dbo.ProductBase_ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Specification", "SpecificationSpecification")
                        .WithMany("ProductSpecification")
                        .HasForeignKey("SpecificationSpecificationId")
                        .HasConstraintName("FK_dbo.ProductSpecification_dbo.Specification_Specification_SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.PropertyAdditionalImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("PropertyAdditionalImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.PropertyAdditionalImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.PropertyAdditional", "PropertyAdditional")
                        .WithMany("PropertyAdditionalImage")
                        .HasForeignKey("PropertyAdditionalId")
                        .HasConstraintName("FK_dbo.PropertyAdditionalImage_dbo.PropertyAdditional_PropertyAdditionalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.PropertyListing", b =>
                {
                    b.HasOne("FarmboekAPI.Models.PropertyCategory", "PropertyCategory")
                        .WithMany("PropertyListing")
                        .HasForeignKey("PropertyCategoryId")
                        .HasConstraintName("FK_dbo.PropertyListing_dbo.PropertyCategory_PropertyCategory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "User")
                        .WithMany("PropertyListing")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.PropertyListing_dbo.UserProfile_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Province", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Country", "Country")
                        .WithMany("Province")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_dbo.Province_dbo.Country_CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.RelatedBrand", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "BrandBrand")
                        .WithMany("RelatedBrandBrandBrand")
                        .HasForeignKey("BrandBrandId")
                        .HasConstraintName("FK_dbo.RelatedBrand_dbo.Brand_Brand_BrandId");

                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("RelatedBrandBrand")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.RelatedBrand_dbo.Brand_BrandId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Brand", "ChildBrand")
                        .WithMany("RelatedBrandChildBrand")
                        .HasForeignKey("ChildBrandId")
                        .HasConstraintName("FK_dbo.RelatedBrand_dbo.Brand_ChildBrandId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Remedy", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Problem", "Problem")
                        .WithMany("Remedy")
                        .HasForeignKey("ProblemId")
                        .HasConstraintName("FK_dbo.Remedy_dbo.Problem_ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ProductBase", "ProductBase")
                        .WithMany("Remedy")
                        .HasForeignKey("ProductBaseId")
                        .HasConstraintName("FK_dbo.Remedy_dbo.ProductBase_ProductBaseId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Representative", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("Representative")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.Representative_dbo.Brand_BrandId");

                    b.HasOne("FarmboekAPI.Models.Supplier", "Supplier")
                        .WithMany("Representative")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_dbo.Representative_dbo.Supplier_SupplierId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.RepresentativeImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("RepresentativeImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.RepresentativeImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Representative", "Representative")
                        .WithMany("RepresentativeImage")
                        .HasForeignKey("RepresentativeId")
                        .HasConstraintName("FK_dbo.RepresentativeImage_dbo.Representative_RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.RepresentativeProvince", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Province", "Province")
                        .WithMany("RepresentativeProvince")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_dbo.RepresentativeProvince_dbo.Province_ProvinceId");

                    b.HasOne("FarmboekAPI.Models.Representative", "Representative")
                        .WithMany("RepresentativeProvince")
                        .HasForeignKey("RepresentativeId")
                        .HasConstraintName("FK_dbo.RepresentativeProvince_dbo.Representative_RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.RoleFunction", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Function", "Function")
                        .WithMany("RoleFunction")
                        .HasForeignKey("FunctionId")
                        .HasConstraintName("FK_dbo.RoleFunction_dbo.Function_FunctionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.WebpagesRoles", "Role")
                        .WithMany("RoleFunction")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.RoleFunction_dbo.webpages_Roles_RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Route", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Groups", "Group")
                        .WithMany("Route")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_dbo.Route_dbo.Groups_GroupId");

                    b.HasOne("FarmboekAPI.Models.ProblemBase", "ProblemBase")
                        .WithMany("Route")
                        .HasForeignKey("ProblemBaseId")
                        .HasConstraintName("FK_dbo.Route_ProblemBase_dbo.ProblemBaseId");

                    b.HasOne("FarmboekAPI.Models.Section", "Section")
                        .WithMany("Route")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_dbo.Route_dbo.Section_SectionId");

                    b.HasOne("FarmboekAPI.Models.SubGroups", "SubGroup")
                        .WithMany("Route")
                        .HasForeignKey("SubGroupId")
                        .HasConstraintName("FK_dbo.Route_dbo.SubGroups_SubGroupId");

                    b.HasOne("FarmboekAPI.Models.SuperGroups", "SuperGroup")
                        .WithMany("Route")
                        .HasForeignKey("SuperGroupId")
                        .HasConstraintName("FK_dbo.Route_dbo.SuperGroups_SuperGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.SubGroupGroupList", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListType", "ListTypeListType")
                        .WithMany("SubGroupGroupList")
                        .HasForeignKey("ListTypeListTypeId")
                        .HasConstraintName("FK_dbo.SubGroupGroupList_dbo.ListType_ListType_ListTypeId");

                    b.HasOne("FarmboekAPI.Models.SubGroups", "SubGroupSubGroup")
                        .WithMany("SubGroupGroupList")
                        .HasForeignKey("SubGroupSubGroupId")
                        .HasConstraintName("FK_dbo.SubGroupGroupList_dbo.SubGroups_SubGroup_SubGroupId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Supplier", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Country", "Country")
                        .WithMany("Supplier")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_dbo.Supplier_dbo.Country_CountryId");

                    b.HasOne("FarmboekAPI.Models.Province", "Province")
                        .WithMany("Supplier")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_dbo.Supplier_dbo.Province_ProvinceId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierBrand", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("SupplierBrand")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.SupplierBrand_dbo.Brand_BrandId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Supplier", "Supplier")
                        .WithMany("SupplierBrand")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_dbo.SupplierBrand_dbo.Supplier_SupplierId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierBrand1", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "BrandBrand")
                        .WithMany("SupplierBrand1")
                        .HasForeignKey("BrandBrandId")
                        .HasConstraintName("FK_dbo.SupplierBrand1_dbo.Brand_Brand_BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Supplier", "SupplierSupplier")
                        .WithMany("SupplierBrand1")
                        .HasForeignKey("SupplierSupplierId")
                        .HasConstraintName("FK_dbo.SupplierBrand1_dbo.Supplier_Supplier_SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("SupplierImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.SupplierImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Supplier", "Supplier")
                        .WithMany("SupplierImage")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_dbo.SupplierImage_dbo.Supplier_SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierMunicipalDistrict", b =>
                {
                    b.HasOne("FarmboekAPI.Models.MunicipalDistrict", "MunicipalDistrict")
                        .WithMany("SupplierMunicipalDistrict")
                        .HasForeignKey("MunicipalDistrictId")
                        .HasConstraintName("FK_dbo.SupplierMunicipalDistrict_dbo.MunicipalDistrict_MunicipalDistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Supplier", "Supplier")
                        .WithMany("SupplierMunicipalDistrict")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_dbo.SupplierMunicipalDistrict_dbo.Supplier_SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierProduct", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Entry", "Entry")
                        .WithMany("SupplierProduct")
                        .HasForeignKey("EntryId")
                        .HasConstraintName("FK_dbo.SupplierProduct_dbo.Entry_EntryId");

                    b.HasOne("FarmboekAPI.Models.ProductBase", "ProductBase")
                        .WithMany("SupplierProduct")
                        .HasForeignKey("ProductBaseId")
                        .HasConstraintName("FK_dbo.SupplierProduct_dbo.ProductBase_ProductBaseId");

                    b.HasOne("FarmboekAPI.Models.Route", "RouteRoute")
                        .WithMany("SupplierProduct")
                        .HasForeignKey("RouteRouteId")
                        .HasConstraintName("FK_dbo.SupplierProduct_dbo.Route_Route_RouteId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.SupplierTown", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Supplier", "Supplier")
                        .WithMany("SupplierTown")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_dbo.SupplierTown_dbo.Supplier_SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Town", "Town")
                        .WithMany("SupplierTown")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_dbo.SupplierTown_dbo.Town_TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.Town", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Province", "ProvinceProvince")
                        .WithMany("Town")
                        .HasForeignKey("ProvinceProvinceId")
                        .HasConstraintName("FK_dbo.Town_dbo.Province_ProvinceId_ProvinceId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Tractor", b =>
                {
                    b.HasOne("FarmboekAPI.Models.MenuType", "MenuType")
                        .WithMany("Tractor")
                        .HasForeignKey("MenuTypeId")
                        .HasConstraintName("FK_dbo.Tractor_dbo.MenuType_MenuTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("Tractor")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.Tractor_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.TractorBase", "TractorBase")
                        .WithMany("Tractor")
                        .HasForeignKey("TractorBaseId")
                        .HasConstraintName("FK_dbo.Tractor_dbo.TractorBase_TractorBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.TractorBase", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("TractorBase")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.TractorBase_dbo.Brand_BrandID");

                    b.HasOne("FarmboekAPI.Models.EntryType", "EntryType")
                        .WithMany("TractorBase")
                        .HasForeignKey("EntryTypeId")
                        .HasConstraintName("FK_dbo.TractorBase_dbo.EntryType_EntryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "Specification")
                        .WithMany("TractorBase")
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_dbo.TractorBase_dbo.ListingFile_SpecificationID");
                });

            modelBuilder.Entity("FarmboekAPI.Models.TractorImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("TractorImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.TractorImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.TractorBase", "TractorBase")
                        .WithMany("TractorImage")
                        .HasForeignKey("TractorBaseId")
                        .HasConstraintName("FK_dbo.TractorImage_dbo.TractorBase_TractorBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.TradeAd", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Groups", "Group")
                        .WithMany("TradeAd")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_dbo.TradeAd_dbo.Groups_GroupId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Province", "Province")
                        .WithMany("TradeAd")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_dbo.TradeAd_dbo.Province_ProvinceId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.TraderProfileSnapshot", "Seller")
                        .WithMany("TradeAd")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK_dbo.TradeAd_dbo.TraderProfileSnapshot_SellerId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.SubGroups", "SubGroup")
                        .WithMany("TradeAd")
                        .HasForeignKey("SubGroupId")
                        .HasConstraintName("FK_dbo.TradeAd_dbo.SubGroups_SubGroupId");

                    b.HasOne("FarmboekAPI.Models.SuperGroups", "SuperGroup")
                        .WithMany("TradeAd")
                        .HasForeignKey("SuperGroupId")
                        .HasConstraintName("FK_dbo.TradeAd_dbo.SuperGroups_SuperGroupId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Town", "Town")
                        .WithMany("TradeAd")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_dbo.TradeAd_dbo.Town_TownId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.TradeAdContactLog", b =>
                {
                    b.HasOne("FarmboekAPI.Models.TradeAd", "TradeAd")
                        .WithMany("TradeAdContactLog")
                        .HasForeignKey("TradeAdId")
                        .HasConstraintName("FK_dbo.TradeAdContactLog_dbo.TradeAd_TradeAdId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "UserProfile")
                        .WithMany("TradeAdContactLog")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("FK_dbo.TradeAdContactLog_dbo.UserProfile_UserProfileId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.TradeAdImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("TradeAdImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.TradeAdImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.TradeAd", "TradeAd")
                        .WithMany("TradeAdImage")
                        .HasForeignKey("TradeAdId")
                        .HasConstraintName("FK_dbo.TradeAdImage_dbo.TradeAd_TradeAdId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.TradeAdTransaction", b =>
                {
                    b.HasOne("FarmboekAPI.Models.TraderProfileSnapshot", "Buyer")
                        .WithMany("TradeAdTransaction")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK_dbo.TradeAdTransaction_dbo.TraderProfileSnapshot_BuyerId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.TradeAd", "TradeAd")
                        .WithMany("TradeAdTransaction")
                        .HasForeignKey("TradeAdId")
                        .HasConstraintName("FK_dbo.TradeAdTransaction_dbo.TradeAd_TradeAdId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.TraderProfileSnapshot", b =>
                {
                    b.HasOne("FarmboekAPI.Models.BankAccountType", "BankAccountType")
                        .WithMany("TraderProfileSnapshot")
                        .HasForeignKey("BankAccountTypeId")
                        .HasConstraintName("FK_dbo.TraderProfileSnapshot_dbo.BankAccountType_BankAccountTypeId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Bank", "Bank")
                        .WithMany("TraderProfileSnapshot")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_dbo.TraderProfileSnapshot_dbo.Bank_BankId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "User")
                        .WithMany("TraderProfileSnapshot")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.TraderProfileSnapshot_dbo.UserProfile_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserBankAccount", b =>
                {
                    b.HasOne("FarmboekAPI.Models.BankAccountType", "BankAccountType")
                        .WithMany("UserBankAccount")
                        .HasForeignKey("BankAccountTypeId")
                        .HasConstraintName("FK_dbo.UserBankAccount_dbo.BankAccountType_BankAccountTypeId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Bank", "Bank")
                        .WithMany("UserBankAccount")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_dbo.UserBankAccount_dbo.Bank_BankId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "User")
                        .WithMany("UserBankAccount")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserBankAccount_dbo.UserProfile_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserFavouriteTradeAd", b =>
                {
                    b.HasOne("FarmboekAPI.Models.TradeAd", "TradeAd")
                        .WithMany("UserFavouriteTradeAd")
                        .HasForeignKey("TradeAdId")
                        .HasConstraintName("FK_dbo.UserFavouriteTradeAd_dbo.TradeAd_TradeAdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "User")
                        .WithMany("UserFavouriteTradeAd")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserFavouriteTradeAd_dbo.UserProfile_UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("UserImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.UserImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "User")
                        .WithMany("UserImage")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserImage_dbo.UserProfile_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserIndustries", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Groups", "IndustryGroup")
                        .WithMany("UserIndustries")
                        .HasForeignKey("IndustryGroupId")
                        .HasConstraintName("FK_dbo.UserIndustries_dbo.Groups_Industry_GroupId");

                    b.HasOne("FarmboekAPI.Models.UserProfile", "UserUser")
                        .WithMany("UserIndustries")
                        .HasForeignKey("UserUserId")
                        .HasConstraintName("FK_dbo.UserIndustries_dbo.UserProfile_User_UserId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserProfile", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Address", "AddressIdAddressType")
                        .WithMany("UserProfile")
                        .HasForeignKey("AddressIdAddressTypeId")
                        .HasConstraintName("FK_dbo.UserProfile_dbo.Address_AddressId_AddressTypeId");

                    b.HasOne("FarmboekAPI.Models.UserProfile", "ParentUserUser")
                        .WithMany("InverseParentUserUser")
                        .HasForeignKey("ParentUserUserId")
                        .HasConstraintName("FK_dbo.UserProfile_dbo.UserProfile_ParentUser_UserId");

                    b.HasOne("FarmboekAPI.Models.UserType", "UserTypeUserType")
                        .WithMany("UserProfile")
                        .HasForeignKey("UserTypeUserTypeId")
                        .HasConstraintName("FK_dbo.UserProfile_dbo.UserType_UserTypeId_UserTypeId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserProfileChatMessage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ChatMessage", "ChatMessage")
                        .WithMany("UserProfileChatMessage")
                        .HasForeignKey("ChatMessageId")
                        .HasConstraintName("FK_dbo.UserProfileChatMessage_dbo.ChatMessage_ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "Receiver")
                        .WithMany("UserProfileChatMessageReceiver")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK_dbo.UserProfileChatMessage_dbo.UserProfile_ReceiverId")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "Sender")
                        .WithMany("UserProfileChatMessageSender")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_dbo.UserProfileChatMessage_dbo.UserProfile_SenderId")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserRoute", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("UserRoute")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.UserRoute_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.UserProfile", "User")
                        .WithMany("UserRoute")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserRoute_dbo.UserProfile_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.UserType", b =>
                {
                    b.HasOne("FarmboekAPI.Models.AccessType", "AccessLevelAccessType")
                        .WithMany("UserType")
                        .HasForeignKey("AccessLevelAccessTypeId")
                        .HasConstraintName("FK_dbo.UserType_dbo.AccessType_AccessLevel_AccessTypeId");

                    b.HasOne("FarmboekAPI.Models.EmployeeType", "EmployeeTypeEmployeeType")
                        .WithMany("UserType")
                        .HasForeignKey("EmployeeTypeEmployeeTypeId")
                        .HasConstraintName("FK_dbo.UserType_dbo.EmployeeType_EmployeeType_EmployeeTypeId");

                    b.HasOne("FarmboekAPI.Models.ProfileType", "ProfileTypeProfileType")
                        .WithMany("UserType")
                        .HasForeignKey("ProfileTypeProfileTypeId")
                        .HasConstraintName("FK_dbo.UserType_dbo.ProfileType_ProfileType_ProfileTypeId");
                });

            modelBuilder.Entity("FarmboekAPI.Models.Vehicle", b =>
                {
                    b.HasOne("FarmboekAPI.Models.MenuType", "MenuType")
                        .WithMany("Vehicle")
                        .HasForeignKey("MenuTypeId")
                        .HasConstraintName("FK_dbo.Vehicle_dbo.MenuType_MenuTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.Route", "Route")
                        .WithMany("Vehicle")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_dbo.Vehicle_dbo.Route_RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.VehicleBase", "VehicleBase")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleBaseId")
                        .HasConstraintName("FK_dbo.Vehicle_dbo.VehicleBase_VehicleBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.VehicleBase", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("VehicleBase")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.VehicleBase_dbo.Brand_BrandID");

                    b.HasOne("FarmboekAPI.Models.EntryType", "EntryType")
                        .WithMany("VehicleBase")
                        .HasForeignKey("EntryTypeId")
                        .HasConstraintName("FK_dbo.VehicleBase_dbo.EntryType_EntryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.ListingFile", "Specification")
                        .WithMany("VehicleBase")
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_dbo.VehicleBase_dbo.ListingFile_SpecificationID");
                });

            modelBuilder.Entity("FarmboekAPI.Models.VehicleImage", b =>
                {
                    b.HasOne("FarmboekAPI.Models.ListingFile", "ListingFile")
                        .WithMany("VehicleImage")
                        .HasForeignKey("ListingFileId")
                        .HasConstraintName("FK_dbo.VehicleImage_dbo.ListingFile_ListingFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.VehicleBase", "VehicleBase")
                        .WithMany("VehicleImage")
                        .HasForeignKey("VehicleBaseId")
                        .HasConstraintName("FK_dbo.VehicleImage_dbo.VehicleBase_VehicleBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.VehicleTradeAd", b =>
                {
                    b.HasOne("FarmboekAPI.Models.Brand", "Brand")
                        .WithMany("VehicleTradeAd")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_dbo.VehicleTradeAd_dbo.Brand_BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.TradeAd", "TradeAd")
                        .WithMany("VehicleTradeAd")
                        .HasForeignKey("TradeAdId")
                        .HasConstraintName("FK_dbo.VehicleTradeAd_dbo.TradeAd_TradeAdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.WebpagesOauthMembership", b =>
                {
                    b.HasOne("FarmboekAPI.Models.UserProfile", "User")
                        .WithMany("WebpagesOauthMembership")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_webpages_OAuthMembership_UserProfile")
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.WebpagesMembership", "UserNavigation")
                        .WithMany("WebpagesOauthMembership")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.webpages_OAuthMembership_dbo.webpages_Membership_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmboekAPI.Models.WebpagesUsersInRoles", b =>
                {
                    b.HasOne("FarmboekAPI.Models.WebpagesRoles", "Role")
                        .WithMany("WebpagesUsersInRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.webpages_UsersInRoles_dbo.webpages_Roles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.WebpagesMembership", "User")
                        .WithMany("WebpagesUsersInRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.webpages_UsersInRoles_dbo.webpages_Membership_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FarmboekAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FarmboekAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmboekAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FarmboekAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
